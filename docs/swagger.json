{
    "swagger": "2.0",
    "info": {
        "description": "Essa é uma api para gerenciar pessoas e relações de parentesco",
        "title": "Family Tree API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/person": {
            "get": {
                "description": "Busca todas as pessoas salvas no banco",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Busca todas as pessoas salvas no banco",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Página que se deseja buscar onde a página 0 é a primeira página",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Tamanho da página",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.GetPeopleResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Cria uma pessoa dado um body com o nome desejado",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Cria uma pessoa dado um body com o nome desejado",
                "parameters": [
                    {
                        "description": "Nome da pessoa que deseja-se criar",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.PostPersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.Person"
                        }
                    }
                }
            }
        },
        "/person/parent": {
            "post": {
                "description": "Cria uma relação de parentesco entre pai e filho\nNão é permitido criação de relação incestuosa",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationship"
                ],
                "summary": "Cria uma relação de parentesco entre pai e filho",
                "parameters": [
                    {
                        "description": "Relação que deseja-se criar",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.PostCreateParentRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "delete": {
                "description": "Remove uma relação de parentesco entre pai e filho\nNão é permitido a remoção da relação se os pais do filho estiverem em uma relação de esposo e este for o único filho do casal",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationship"
                ],
                "summary": "Remove uma relação de parentesco entre pai e filho",
                "parameters": [
                    {
                        "description": "Relação que deseja-se remover",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeleteParentRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/person/spouse": {
            "post": {
                "description": "Cria uma relação de esposo entre duas pessoas\nSó é possível criar relação entre duas pessoas se elas tiverem um filho",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationship"
                ],
                "summary": "Cria uma relação de esposo entre duas pessoas",
                "parameters": [
                    {
                        "description": "Relação que deseja-se criar",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.PostCreateSpouseRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "delete": {
                "description": "Remove uma relação de esposo entre duas pessoas",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationship"
                ],
                "summary": "Remove uma relação de esposo entre duas pessoas",
                "parameters": [
                    {
                        "description": "Relação que deseja-se remover",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeleteSpouseRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/person/{personID}": {
            "get": {
                "description": "Busca detalhes de uma pessoa pelo seu id\nRetorna 404 caso não existe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Busca detalhes de uma pessoa pelo seu id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID da pessoa no formato uuid (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.Person"
                        }
                    }
                }
            }
        },
        "/person/{personID}/bacons/{targetID}": {
            "get": {
                "description": "Busca todas as pessoas salvas no banco",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Busca o número de Bacon entre duas pessoas",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID da pessoa no formato uuid (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID da pessoa alvo no formato uuid (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)",
                        "name": "targetID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.GetBaconsNumberResponse"
                        }
                    }
                }
            }
        },
        "/person/{personID}/tree": {
            "get": {
                "description": "Busca a árvore genealógica de uma pessoa, reduzindo relações redundantes\nResultado pode ser entregue tanto de json, xml e em binário\nA relação de PARENT indica que a pessoa é pai da pessoa indicada\nA relação de SPOUSE indica que a pesoa possui uma relação de casamento com a pessoa indica\nLembrando que para reduzir redundância a relação só aparece em uma das pessoas\nNa árvore está incluso:\na) Todos os seus ancestrais\nb) Seus filhos\nc) Seus sobrinhos\nd) Relações de esposo entre ancestrais, não incluindo se estiver a relação de esposo com alguém sem relação sanguínea",
                "produces": [
                    "application/json",
                    "application/xml",
                    "application/octet-stream"
                ],
                "tags": [
                    "relationship"
                ],
                "summary": "Busca a árvore genealógica de uma pessoa",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID da pessoa no formato uuid (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.FamilyTree"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.DeleteParentRelationshipRequest": {
            "type": "object",
            "properties": {
                "childID": {
                    "type": "string"
                },
                "parentID": {
                    "type": "string"
                }
            }
        },
        "server.DeleteSpouseRelationshipRequest": {
            "type": "object",
            "properties": {
                "firstSpouseID": {
                    "type": "string"
                },
                "secondSpouseID": {
                    "type": "string"
                }
            }
        },
        "server.FamilyTree": {
            "type": "object",
            "properties": {
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.FamilyTreeNode"
                    }
                }
            }
        },
        "server.FamilyTreeNode": {
            "type": "object",
            "properties": {
                "personID": {
                    "$ref": "#/definitions/server.Person"
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.FamilyTreeRelation"
                    }
                }
            }
        },
        "server.FamilyTreeRelation": {
            "type": "object",
            "properties": {
                "relation": {
                    "type": "string"
                },
                "relativeID": {
                    "type": "string"
                }
            }
        },
        "server.GetBaconsNumberResponse": {
            "type": "object",
            "properties": {
                "pathLength": {
                    "type": "integer"
                }
            }
        },
        "server.GetPeopleResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.Person"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/server.PaginationResponseMetadata"
                }
            }
        },
        "server.PaginationResponseMetadata": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "totalItens": {
                    "type": "integer"
                }
            }
        },
        "server.Person": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "server.PostCreateParentRelationshipRequest": {
            "type": "object",
            "properties": {
                "childID": {
                    "type": "string"
                },
                "parentID": {
                    "type": "string"
                }
            }
        },
        "server.PostCreateSpouseRelationshipRequest": {
            "type": "object",
            "properties": {
                "firstSpouseID": {
                    "type": "string"
                },
                "secondSpouseID": {
                    "type": "string"
                }
            }
        },
        "server.PostPersonRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        }
    }
}